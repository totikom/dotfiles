set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'aserebryakov/vim-todo-lists'
"Plugin 'andymass/vim-matchup'
Plugin 'vim-scripts/auto-pairs-gentle'
Plugin 'ARM9/arm-syntax-vim'
"Plugin 'vim-latex/vim-latex'

"LaTeX
Plugin 'lervag/vimtex'
Plugin 'sirver/ultisnips'
Plugin 'KeitaNakamura/tex-conceal.vim'

Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
"Plugin 'freitass/todo.txt-vim'
"Plugin 'suoto/vim-hdl'
Plugin 'junegunn/vim-easy-align'
"Plugin 'szymonmaszke/vimpyter' "Vundle"

Plugin 'rust-lang/rust.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'lyokha/vim-xkbswitch'
"Plugin 'lldb-tools/vim-lldb'
"Plugin 'prabirshrestha/async.vim'
"Plugin 'prabirshrestha/vim-lsp'
"Plugin 'prabirshrestha/asyncomplete.vim'
"Plugin 'prabirshrestha/asyncomplete-lsp.vim'
"Plugin 'ErichDonGubler/vim-sublime-monokai'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set showmode
set autoindent
set smartindent
set wrap
set history=500
set number
set relativenumber
set showmatch
set ruler
set hlsearch
set incsearch
set ignorecase
set smarttab
set foldmethod=indent
set laststatus=2
"set nofoldenable
set autoread
syntax on
colorscheme default

"local settings
"set keymap=russian-jcukenwin
"set iminsert=0
"set imsearch=0
"
let g:XkbSwitchEnabled = 1
let g:XkbSwitchLib = '/usr/local/lib/libg3kbswitch.so'
let g:XkbSwitchIMappings = ['ru']
"let g:XkbSwitchSkipIMappings =
	""\ {'*' : ['.', '>', ':', ';', ',', '{<CR>', '`', '/*', '/*<CR>'],}
let g:XkbSwitchSkipIMappings =
			\ {'*' : ['.', '>', ':', ';', ',', '{','}', '[',']','`',"'", '"', '/*', '/*<CR>'],}

"highlight lCursor guifg=NONE guibg=Cyan
set spelllang=ru_yo,en_us
set nospell
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u`]

set wildmenu
set wildmode=full,full

" Smart way to move between windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l

"imap <C-x> <C-^>
"Remap leader
:let mapleader = ","

au BufNewFile,BufRead *.s,*.S set filetype=arm " arm = armv7"


"LaTeX-Suite
 "OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
 "'plaintex' instead of 'tex', which results in vim-latex not being loaded.
 "The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'
"let g:Tex_DefaultTargetFormat = 'pdf'
"let g:Tex_MultipleCompileFormats = 'pdf'
let g:vimtex_view_method = 'zathura'
    let g:vimtex_compiler_latexmk_engines = {
        \ '_'                : '-xelatex',
        \ 'pdflatex'         : '-pdf',
        \ 'dvipdfex'         : '-pdfdvi',
        \ 'lualatex'         : '-lualatex',
        \ 'xelatex'          : '-xelatex',
        \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
        \ 'context (luatex)' : '-pdf -pdflatex=context',
        \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
        \}
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
set conceallevel=1
let g:tex_conceal='abdmg'
hi Conceal ctermbg=none


if match($TERM, "screen")!=-1
	set term=xterm
endif

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

map ,, :w<CR>:Ctest<CR>
map ,l :w<CR>:Ctest --lib<CR>
map ,q :w<CR>:Ctest -q<CR>
map ,f :RustFmt<CR>:w<CR>
"Rust Embedded
map ,e :w<CR>:Cargo embed<CR>

